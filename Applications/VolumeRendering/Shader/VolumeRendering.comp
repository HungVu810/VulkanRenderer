#version 450

layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in; // At least 1 for each local size

layout(set = 0, binding = 0) uniform sampler3D volumnSampler; // A 3D voxel grid of intensities, [0, 1] grey scale S. Each intensity is a float but returned as (S, 0, 0, 0) when using texture() for lookup

layout(set = 0, binding = 1, rgba8) uniform writeonly image2D raycastedImage;

layout(set = 0, binding = 2) uniform sampler1D transferSampler; // A 1D color lookup table of rgba32. Used as a transfer function

// ViewPyramid block aligned to vec4 according to std140, including height
layout(set = 0, binding = 3, std140) uniform ViewPyramid {
	float height; // Length from the top to the base of the pyramid (image grid)
	vec4 location; // Top of the pyramid (camera, the apex)
	vec4 side;
	vec4 up;
	vec4 forward; // Looking direction
} viewPyramid;

layout(set = 0, binding = 4, column_major) uniform PixelTransform {
	mat4 toWorld;
} pixelTransform;

struct Ray {
	vec3 origin;
	vec3 direction;
};

struct HitInfo {
	bool isHit;
	float tMin, tMax; // Scale a ray's direction to the 2 hit locations, what if only one hit ?
};

struct Slab {
	vec3 normal;
	vec3 point;
};

float intersectSlab(Ray ray, Slab slab) {
	return dot(slab.normal, slab.point - ray.origin) / dot(slab.normal, ray.direction);
}

HitInfo intersect(Ray ray, vec3 volumeMin, vec3 volumeMax) {
	// volumeMin and volumeMax denotes 2 extremes of a volume. The volume must be an
	// axis-aligned bouding box since this function logic is based on these facts:
	// X slabs (volumeMin.x, volumeMax.x) has their normal (1, 0, 0).
	// Y slabs (volumeMin.y, volumeMax.y) has their normal (0, 1, 0).
	// Z slabs (volumeMin.z, volumeMax.z) has their normal (0, 0, -1) which goes into the screen.

	const Slab slabMinX = Slab(vec3(1, 0, 0), vec3(volumeMin.x, 0, 0));
	const Slab slabMaxX = Slab(vec3(1, 0, 0), vec3(volumeMax.x, 0, 0));

	const Slab slabMinY = Slab(vec3(0, 1, 0), vec3(0, volumeMin.y, 0));
	const Slab slabMaxY = Slab(vec3(0, 1, 0), vec3(0, volumeMax.y, 0));

	const Slab slabMinZ = Slab(vec3(0, 0, -1), vec3(0, 0, volumeMin.z));
	const Slab slabMaxZ = Slab(vec3(0, 0, -1), vec3(0, 0, volumeMax.z));

	float tOne = intersectSlab(ray, slabMinX);
	float tTwo = intersectSlab(ray, slabMaxX);
	const float tMinX = min(tOne, tTwo);
	const float tMaxX = max(tOne, tTwo);

	tOne = intersectSlab(ray, slabMinY);
	tTwo = intersectSlab(ray, slabMaxY);
	const float tMinY = min(tOne, tTwo);
	const float tMaxY = max(tOne, tTwo);

	tOne = intersectSlab(ray, slabMinZ);
	tTwo = intersectSlab(ray, slabMaxZ);
	const float tMinZ = min(tOne, tTwo);
	const float tMaxZ = max(tOne, tTwo);

	const float tMin = max(max(tMinX, tMinY), tMinZ);
	const float tMax = min(min(tMaxX, tMaxY), tMaxZ);

	// If not hit, set the color to the clear color value
	// tMin > tMax -> Ray misses the box
	// tMax < 0 -> The box is behind the ray
	if (tMin > tMax || tMax < 0) return HitInfo(false, tMin, tMax);
	else return HitInfo(true, tMin, tMax);
	// If HitInfo return true, either:
	// tMin < 0 && tMax > 0, tMin < tMax -> The ray origin is inside the box, using the ray position as tMin to sample the volume
	// tMin > 0 && tMax > 0, tMin < tMax -> tMin and tMax can be used for sample the volume
}

vec3 lookupColor(float intensity) {
	// intensity = [0, 1]
	return texture(transferSampler, intensity).xyz;
}

float lookupAlpha(float intensity) {
	// intensity = [0, 1]
	return texture(transferSampler, intensity).w;
}

void main() {
	// Orthographic projection, with the box dimension beside its depth equals to the image dimension
	// Perspective projection, switchable with ortho

	// Viewport space [0, 1]^2
	const ivec2 pixelViewportLocation = ivec2(gl_GlobalInvocationID.xy); // Pixel location in viewport space
	const vec3 pixelWorldLocation = (pixelTransform.toWorld * vec4(pixelViewportLocation, 0, 1)).xyz;

	// Setup a proxy volumn origin. The dimension of the volumn matches with the sampler space [0, 1]^3
	// Proxy volume width  = volumeMax.x - volumeMin.x == 1
	// Proxy volume height = volumeMax.y - volumeMin.y == 1
	// Proxy volume depth  = volumeMax.z - volumeMin.z == 1
	const vec3 volumeMin = vec3(-0.5, -0.5, -1); // Proxy volume origin, bottom left corner at the back
	const vec3 volumeMax = vec3(0.5, 0.5, 0);
	const vec3 samplerOrigin = vec3(-0.5, -0.5, 0); // Could be any of the 8 corner of the volume grid

	uint samples = 200; // The samples >= 0 within the 2 defaults samples at each extremes tMin and tMax, 113 slides
	vec3 clearColor = vec3(0, 0, 0); // For pixels that doesn't hit
	vec3 pixelColor = vec3(0);

	const Ray raycast = Ray(viewPyramid.location.xyz, normalize(pixelWorldLocation - viewPyramid.location.xyz)); // If doing orthographic, the pixel direction == viewPyramid.forward
	const HitInfo hitInfo = intersect(raycast, volumeMin, volumeMax);

	if (!hitInfo.isHit) pixelColor = clearColor; // TODO: The outter pixels doesn't hit with the default pixel transform?
	else {
		// Back to front, recursive approach
		const float stepSize = (hitInfo.tMax - hitInfo.tMin) / (samples + 1);
		for (int t = 0; t <= (samples + 1); t++) {
			const vec3 directionTrueLength = (hitInfo.tMax - t * stepSize) * raycast.direction; // (hitInfo.tMax - t * stepSize): hitInfo.tMax -> hitInfo.tMin
			const vec3 sampleLocation = vec3(raycast.origin + directionTrueLength);
			const vec4 sampledIntensity = texture(volumnSampler, abs(sampleLocation - samplerOrigin));
			const float intensity = sampledIntensity.x; // (S, 0, 0, 0)
			if (t == 0) { // The back
				pixelColor = lookupColor(intensity);
			}
			else { // Going to the front
				pixelColor = lookupColor(intensity) + (1 - lookupAlpha(intensity)) * pixelColor;
			}
		}
	}

	imageStore(raycastedImage, pixelViewportLocation, vec4(pixelColor, 1.0));
}

