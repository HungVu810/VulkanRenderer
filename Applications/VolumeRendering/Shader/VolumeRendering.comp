#version 450

layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in; // At least 1 for each local size

layout(set = 0, binding = 0) uniform sampler3D volumnSampler; // Stores 3D intensities, [0, 1] * color white, not alpha

layout(set = 0, binding = 1, rgba8) uniform writeonly image2D raycastedImage;

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct HitInfo
{
	bool isHit;
	float tMin, tMax; // Scale a ray's direction to the 2 hit locations, what if only one hit ?
};

struct Slab
{
	vec3 normal;
	vec3 point;
};

float intersectSlab(Ray ray, Slab slab)
{
	return dot(slab.normal, slab.point - ray.origin) / dot(slab.normal, ray.direction);
}

// volumeMin and volumeMax denotes 2 extremes of a volume. The volume must be an
// axis-aligned bouding box since this function logic is based on these facts:
// X slabs (volumeMin.x, volumeMax.x) has their normal (1, 0, 0).
// Y slabs (volumeMin.y, volumeMax.y) has their normal (0, 1, 0).
// Z slabs (volumeMin.z, volumeMax.z) has their normal (0, 0, -1) which goes into the screen.
HitInfo intersect(Ray ray, vec3 volumeMin, vec3 volumeMax)
{
	const Slab slabMinX = Slab(vec3(1, 0, 0), vec3(volumeMin.x, 0, 0));
	const Slab slabMaxX = Slab(vec3(1, 0, 0), vec3(volumeMax.x, 0, 0));

	const Slab slabMinY = Slab(vec3(0, 1, 0), vec3(0, volumeMin.y, 0));
	const Slab slabMaxY = Slab(vec3(0, 1, 0), vec3(0, volumeMax.y, 0));

	const Slab slabMinZ = Slab(vec3(0, 0, -1), vec3(0, 0, volumeMin.z));
	const Slab slabMaxZ = Slab(vec3(0, 0, -1), vec3(0, 0, volumeMax.z));

	float tOne = intersectSlab(ray, slabMinX);
	float tTwo = intersectSlab(ray, slabMaxX);
	const float tMinX = min(tOne, tTwo);
	const float tMaxX = max(tOne, tTwo);

	tOne = intersectSlab(ray, slabMinY);
	tTwo = intersectSlab(ray, slabMaxY);
	const float tMinY = min(tOne, tTwo);
	const float tMaxY = max(tOne, tTwo);

	tOne = intersectSlab(ray, slabMinZ);
	tTwo = intersectSlab(ray, slabMaxZ);
	const float tMinZ = min(tOne, tTwo);
	const float tMaxZ = max(tOne, tTwo);

	const float tMin = max(max(tMinX, tMinY), tMinZ);
	const float tMax = min(min(tMaxX, tMaxY), tMaxZ);

	// If not hit, set the color to the clear color value
	// tMin > tMax -> Ray misses the box
	// tMax < 0 -> The box is behind the ray
	if (tMin > tMax || tMax < 0) return HitInfo(false, tMin, tMax);
	else return HitInfo(true, tMin, tMax);
	// If HitInfo return true, either:
	// tMin < 0 && tMax > 0, tMin < tMax -> The ray origin is inside the box, using the ray position as tMin to sample the volume
	// tMin > 0 && tMax > 0, tMin < tMax -> tMin and tMax can be used for sample the volume
}

// Fixed transfer fuction for testing
// Transfer function from ImGUI
// layout(set 0, binding = ...) uniform dynamic sampler4D volumnColor; f(intensity) = color
// layout(set 0, binding = ...) uniform dynamic sampler2D volumnAlpha; f(intensity) = alpha
vec3 toColor(float intensity)
{
	// intensity = [0, 1]
	const float pi = acos(-1);
	float red = clamp(sin(intensity * 2.0 * pi), 0.0, 1.0);
	float green = clamp(sin((intensity - (1.0 / 4.0)) * 2.0 * pi), 0.0, 1.0);
	float blue = clamp(sin((intensity  - (1.0 / 2.0)) * 2.0 * pi), 0.0, 1.0);
	return vec3(red, green, blue);
}

float toAlpha(float intensity)
{
	// return 1; // Uniform
	// intensity = [0, 1]
	return intensity;
}

vec4 visualizeDirection(int direction) // Return the color for this pixel based on the direction, default is 0
{
	// direction = 0 (default, bottom-up?/top-down?)
	//           = 1 (sideway)
	ivec2 imageDimension = imageSize(raycastedImage);
	ivec3 textureDimension = textureSize(volumnSampler, 0);

	ivec2 pixelLocation = ivec2(gl_GlobalInvocationID.xy); // This pixel location
	vec2 normalizedPixelLocation = pixelLocation / vec2(imageDimension.x - 1, imageDimension.y - 1); // Normalize the pixel location for testing

	// float slide = 40.0f / 112.0f; // [0, 112] slides, normalized to [0.0, 1.0]
	float slide = 0.5f;
	vec4 sampled = texture(volumnSampler, vec3(normalizedPixelLocation, slide)); // U, V, W
	float intensity = sampled.x; // Only the intensity color value is recorded in the first component
	return vec4(intensity, intensity, intensity, 1.0f); // Gray scale
}

void main()
{
	// Orthographic projection, with the box dimension beside its depth equals to the image dimension

	const vec4 pixelViewportLocation = vec4(gl_GlobalInvocationID.xy, 0.0, 1.0); // Pixel location in viewport space

	// Pixel to world space
	const vec3 volumeDimension = textureSize(volumnSampler, 0) - 1; // [0, W) x [0, H) x [0, D)
	const vec2 imageDimension = imageSize(raycastedImage) - 1; // [0, W) x [0, H)
	const mat4 normalizeComponents = mat4(vec4(1 / imageDimension.x, 0, 0, 0), vec4(0, 1 / imageDimension.y, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
	const mat4 viewportToWorld = mat4(vec4(1, 0, 0, 0), vec4(0, -1, 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1)); // 2 columns, 4 rows
	const mat4 centerAtOrigin = mat4(vec4(1, 0, 0, 0), vec4(0, 1, 0, 0), vec4(0, 0, 1, 0), vec4(-0.5, 0.5, 0, 1)); // Each vec4 represent a column

	// proxyImageOrigin   = (-0.5, 0.5, 0.0)
	// Image proxy width  = [-0.5, -0.5] = 1
	// Image proxy height =  [0.5, -0.5] = 1
	vec4 pixelWorldLocation = centerAtOrigin * viewportToWorld * normalizeComponents * pixelViewportLocation;

	// Setup a proxy volumn origin. The dimension of the volumn is equal to the imageDimension with the depth of 1, ie [0, 1]
	// Proxy volume width  =  [-0.5, 0.5] = 1
	// Proxy volume height =  [0.5, -0.5] = 1
	// Proxy volume depth  = [-1.0, -2.0] = 1
	// vec3 proxyVolumeOrigin = vec3(-0.5, 0.5, -1.0); // Proxy volume dimension [0, 1]^3, this origin is at the front top left
	const vec3 volumeMin = vec3(-0.5, -0.5, -2.0);
	const vec3 volumeMax = vec3(0.5, 0.5, -1.0);

	// TODO: don't do the proxy transformation, instead transform the camera postion and looking direction, make sure to update the projected image grid oritentaiton as well
	// Camera has its own cooridate, seperated from the world cooridnate
	// Camera transformation matrix is given to the image grid as well

	uint samples = 111; // The samples >= 0 within the 2 defaults samples at each extremes tMin and tMax, 113 slides
	vec3 clearColor = vec3(1.0, 0.0, 0.0); // For pixels that doesn't hit
	vec3 pixelColor = vec3(0);

	// const vec3 frontHit = vec3(pixelWorldLocation.xy, -1.0); // Shifted -1.0 in the z direction
	// const vec3 backHit = vec3(pixelWorldLocation.xy, -2.0); // boxDepth
	// const Ray raycast = Ray(frontHit, backHit - frontHit);
	const Ray raycast = Ray(pixelWorldLocation.xyz, vec3(0.0, 0.0, -1.0));
	const HitInfo hitInfo = intersect(raycast, volumeMin, volumeMax);
	if (!hitInfo.isHit) pixelColor = clearColor;
	else
	{
		// Back to front, recursive approach
		const float stepSize = (hitInfo.tMax - hitInfo.tMin) / (samples + 1);
		for (int t = 0; t <= (samples + 1); t++) // Includes [samples, 0]
		{
			const vec3 directionTrueLength = (hitInfo.tMax - t * stepSize) * raycast.direction; // (hitInfo.tMax - t * stepSize): hitInfo.tMax -> hitInfo.tMin
			const vec3 sampleLocation = vec3(raycast.origin + directionTrueLength);
			const vec4 sampledIntensity = texture(volumnSampler, abs(sampleLocation - volumeMin));
			const float intensity = sampledIntensity.x;
			if (t == 0) // Back
			{
				pixelColor = toColor(intensity);
			}
			else // Going to the front
			{
				pixelColor = toColor(intensity) + (1 - toAlpha(intensity)) * pixelColor;
			}
		}

		// Back to front, recursive approach
//		for (int t = int(samples); t >= 0; t--) // Includes [samples, 0]
//		{
//			float tNorm = t / float(samples);
//			const vec3 sampleLocation = vec3(raycast.origin + raycast.directionTrueLength * tNorm);
//			const vec4 sampledIntensity = texture(volumnSampler, abs(sampleLocation - proxyVolumeOrigin));
//			const float intensity = sampledIntensity.x;
//
//			if (tNorm == 1.0) // Back
//			{
//				pixelColor = toColor(intensity);
//			}
//			else // Going to the front
//			{
//				pixelColor = toColor(intensity) + (1 - toAlpha(intensity)) * pixelColor;
//			}
//		}
	}


	imageStore(raycastedImage, ivec2(pixelViewportLocation.xy), vec4(pixelColor, 1.0));
}

