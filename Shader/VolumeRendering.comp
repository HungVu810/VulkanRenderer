#version 450

layout (local_size_x = 10, local_size_y = 10) in;

layout(set = 0, binding = 0) uniform sampler3D volumnSampler; // stores intensities

layout(set = 0, binding = 1, rgba8_snorm) uniform writeonly image2D raycastedImage;

// augment the uv with world space and the volumnSampler with world space coordinate (x,y,z)
// descriptor of the width and height of the screen (push constant?)
// volume data is passed as a descriptor as well
// f(width_x, height_y) -> world space x, y
// perform ray cast from those x, y
// run the compute shader in parallel each pixel, instead of going through each of them one by one
// TODO: how to present the image in the compute shader after finished ray castingn?


void main()
{
	ivec2 imageDimension = imageSize(raycastedImage);
	// ivec2 localInvocXY = ivec2(gl_GlobalInvocationID.xy) / imageDimension; // Local invocation x,y?

	ivec4 red = ivec4(1, 0, 0, 1); // R8G8B8A8
	imageStore(raycastedImage, ivec2(gl_GlobalInvocationID.xy), red);
}

// for each pixel assign a flat color then transfer it over to a swapchain image for testing
// then assign the color value each pixel in a descriptor storage buffer
